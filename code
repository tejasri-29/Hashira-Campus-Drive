import java.math.BigInteger;
import java.util.*;
import java.util.regex.*;

public class Main {
    public static void main(String[] args) {
        String jsonInput = "{\n" +
                " \"keys\": { \"n\": 10, \"k\": 7 },\n" +
                " \"1\": { \"base\": \"6\", \"value\": \"13444211440455345511\" },\n" +
                " \"2\": { \"base\": \"15\", \"value\": \"aed7015a346d635\" },\n" +
                " \"3\": { \"base\": \"15\", \"value\": \"6aeeb69631c227c\" },\n" +
                " \"4\": { \"base\": \"16\", \"value\": \"e1b5e05623d881f\" },\n" +
                " \"5\": { \"base\": \"8\", \"value\": \"316034514573652620673\" },\n" +
                " \"6\": { \"base\": \"3\", \"value\": \"2122212201122002221120200210011020220200\" },\n" +
                " \"7\": { \"base\": \"3\", \"value\": \"20120221122211000100210021102001201112121\" },\n" +
                " \"8\": { \"base\": \"6\", \"value\": \"20220554335330240002224253\" },\n" +
                " \"9\": { \"base\": \"12\", \"value\": \"45153788322a1255483\" },\n" +
                " \"10\": { \"base\": \"7\", \"value\": \"1101613130313526312514143\" }\n" +
                "}";

        // Step 1: Extract n and k
        Pattern keysPattern = Pattern.compile("\"n\":\\s*(\\d+).*?\"k\":\\s*(\\d+)", Pattern.DOTALL);
        Matcher km = keysPattern.matcher(jsonInput);
        int n = 0, k = 0;
        if (km.find()) {
            n = Integer.parseInt(km.group(1));
            k = Integer.parseInt(km.group(2));
        }
        int degree = k - 1;

        // Step 2: Extract all roots
        Pattern rootPattern = Pattern.compile("\"(\\d+)\":\\s*\\{\\s*\"base\":\\s*\"(\\d+)\",\\s*\"value\":\\s*\"([0-9a-zA-Z]+)\"\\s*\\}");
        Matcher rm = rootPattern.matcher(jsonInput);

        TreeMap<Integer, BigInteger> rootMap = new TreeMap<>();
        while (rm.find()) {
            int key = Integer.parseInt(rm.group(1));
            int base = Integer.parseInt(rm.group(2));
            String value = rm.group(3);
            BigInteger root = new BigInteger(value, base);
            rootMap.put(key, root);
        }

        // Step 3: Multiply first (k-1) roots
        BigInteger c = BigInteger.ONE;
        int count = 0;
        for (Map.Entry<Integer, BigInteger> entry : rootMap.entrySet()) {
            if (count == degree) break;
            c = c.multiply(entry.getValue());
            count++;
        }

        // Step 4: Adjust sign
        if (degree % 2 != 0) {
            c = c.negate();
        }

        // Step 5: Print result
        System.out.println("c = " + c);
    }
}
